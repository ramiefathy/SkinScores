import TrendingUpRoundedIcon from '@mui/icons-material/TrendingUpRounded';
import {
  Alert,
  Box,
  Card,
  CardContent,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
} from '@mui/material';
import { format } from 'date-fns';
import { useMemo, useState } from 'react';
import { useAggregates } from '../../hooks/useAggregates';
import { useToolsMetadata } from '../../hooks/useTools';

const AnalyticsPage = () => {
  const { data: tools = [] } = useToolsMetadata();
  const [templateSlug, setTemplateSlug] = useState<string | undefined>(undefined);
  const templateId = useMemo(() => {
    if (!templateSlug) return undefined;
    const match = tools.find((tool) => tool.slug === templateSlug);
    return match?.id;
  }, [templateSlug, tools]);

  const { data: aggregates = [], isLoading, isError } = useAggregates(templateId);

  const summary = useMemo(() => {
    if (aggregates.length === 0) {
      return {
        count: 0,
        numericCount: 0,
        avg: null as number | null,
        min: null as number | null,
        max: null as number | null,
      };
    }
    const totalRuns = aggregates.reduce((sum, agg) => sum + agg.count, 0);
    const totalNumeric = aggregates.reduce(
      (sum, agg) => sum + (agg.numericCount ?? (agg.averageScore !== null ? agg.count : 0)),
      0,
    );
    const weightedScore = aggregates.reduce((sum, agg) => {
      const numericCount = agg.numericCount ?? (agg.averageScore !== null ? agg.count : 0);
      return sum + (agg.averageScore ?? 0) * numericCount;
    }, 0);
    const minScore = aggregates.reduce(
      (min, agg) => {
        if (agg.minScore === null || agg.minScore === undefined) return min;
        return min === null ? agg.minScore : Math.min(min, agg.minScore);
      },
      null as number | null,
    );
    const maxScore = aggregates.reduce(
      (max, agg) => {
        if (agg.maxScore === null || agg.maxScore === undefined) return max;
        return max === null ? agg.maxScore : Math.max(max, agg.maxScore);
      },
      null as number | null,
    );

    return {
      count: totalRuns,
      numericCount: totalNumeric,
      avg: totalNumeric ? weightedScore / totalNumeric : null,
      min: minScore,
      max: maxScore,
    };
  }, [aggregates]);

  const templateOptions = useMemo(
    () => tools.map((tool) => ({ slug: tool.slug, name: tool.name })),
    [tools],
  );

  return (
    <Box display="flex" flexDirection="column" gap={4}>
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Box>
          <Typography variant="h4" fontWeight={600} gutterBottom>
            Analytics & Trends
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Daily aggregates generated by nightly jobs let you monitor calculator usage and
            outcomes.
          </Typography>
        </Box>
        <TrendingUpRoundedIcon color="primary" fontSize="large" />
      </Box>

      <FormControl sx={{ width: 320 }}>
        <InputLabel id="template-filter">Template</InputLabel>
        <Select
          labelId="template-filter"
          value={templateSlug ?? 'all'}
          label="Template"
          onChange={(event) => {
            const value = event.target.value;
            setTemplateSlug(value === 'all' ? undefined : String(value));
          }}
        >
          <MenuItem value="all">All templates</MenuItem>
          {templateOptions.map((option) => (
            <MenuItem key={option.slug} value={option.slug}>
              {option.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {isError && <Alert severity="error">Could not load analytics data.</Alert>}

      <Box display="grid" gridTemplateColumns="repeat(auto-fit, minmax(240px, 1fr))" gap={3}>
        <SummaryCard label="Total sessions" value={summary.count.toLocaleString()} />
        <SummaryCard
          label="Sessions with numeric scores"
          value={summary.numericCount.toLocaleString()}
        />
        <SummaryCard
          label="Average score"
          value={summary.avg !== null ? summary.avg.toFixed(2) : '—'}
        />
        <SummaryCard
          label="Min score"
          value={summary.min !== null ? summary.min.toFixed(1) : '—'}
        />
        <SummaryCard
          label="Max score"
          value={summary.max !== null ? summary.max.toFixed(1) : '—'}
        />
      </Box>

      {summary.numericCount < summary.count && summary.numericCount > 0 && (
        <Typography variant="caption" color="text.secondary">
          Average/min/max reflect the subset of runs that produced numeric scores. Text-only tools
          still appear in total counts.
        </Typography>
      )}

      <TableContainer component={Card}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell>Date</TableCell>
              <TableCell>Template</TableCell>
              <TableCell align="right">Sessions</TableCell>
              <TableCell align="right">Avg score</TableCell>
              <TableCell align="right">Min</TableCell>
              <TableCell align="right">Max</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {isLoading && (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  Loading…
                </TableCell>
              </TableRow>
            )}
            {!isLoading && aggregates.length === 0 && (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  <Typography variant="body2" color="text.secondary">
                    No aggregates available yet. Nightly jobs populate this view after results are
                    recorded.
                  </Typography>
                </TableCell>
              </TableRow>
            )}
            {aggregates.map((aggregate) => (
              <TableRow key={aggregate.id} hover>
                <TableCell>{format(aggregate.periodStart, 'PP')}</TableCell>
                <TableCell>
                  {aggregate.templateName ?? aggregate.templateSlug ?? aggregate.templateId}
                </TableCell>
                <TableCell align="right">{aggregate.count}</TableCell>
                <TableCell align="right">
                  {aggregate.averageScore !== null ? aggregate.averageScore.toFixed(2) : '—'}
                </TableCell>
                <TableCell align="right">
                  {aggregate.minScore !== null ? aggregate.minScore.toFixed(1) : '—'}
                </TableCell>
                <TableCell align="right">
                  {aggregate.maxScore !== null ? aggregate.maxScore.toFixed(1) : '—'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

const SummaryCard = ({ label, value }: { label: string; value: string }) => (
  <Card
    elevation={0}
    sx={{
      borderRadius: 3,
      border: '1px solid rgba(42,127,98,0.12)',
      background: 'rgba(255, 255, 255, 0.8)',
    }}
  >
    <CardContent>
      <Typography variant="overline" color="text.secondary">
        {label}
      </Typography>
      <Typography variant="h5" fontWeight={600}>
        {value}
      </Typography>
    </CardContent>
  </Card>
);

export default AnalyticsPage;
